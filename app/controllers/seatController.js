const {Seat, Event, Balcon} = require('../models/user')
const { Op } = require("sequelize");
const { createTransport } = require('nodemailer');
const PDFDocument = require('pdfkit');
const fs=require('fs')
const bwipjs = require('bwip-js');
const path = require("path")

const transporter = createTransport({
    host: process.env.SMTP_SERVER,
    port:465,
    auth: {
     
      user: process.env.SMTP_MAIL,
      pass: process.env.SMTP_PASSWORD
    },
  });
  
const mailText=`<b>–ë–ò–õ–ï–¢ –ù–ê BIG BEAUTY BOSS VEGAS</b>

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ñ–æ—Ä—É–º BIG BEAUTY BOSS VEGAS! –í–ê–® –ë–ò–õ–ï–¢ –ü–†–ò–ö–†–ï–ü–õ–ï–ù –§–ê–ô–õ–û–ú –ö –≠–¢–û–ú–£ –°–û–û–ë–©–ï–ù–ò–Æ!<br>

–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:<br>

üïò –í–û –°–ö–û–õ–¨–ö–û –ü–†–ò–•–û–î–ò–¢–¨ –ù–ê –§–û–†–£–ú: –∫ 08:30 –ú—Å–∫ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ñ–µ-–±—Ä–µ–π–∫ ‚òïÔ∏è üßÅ).<br>

üá∑üá∫ –ì–î–ï: –∫–æ–Ω—Ü–µ—Ä—Ç–Ω—ã–π –∑–∞–ª Vegas City Hall –≤ —Ç–æ—Ä–≥–æ–≤–æ-—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ ¬´VEGAS –ö—Ä–æ–∫—É—Å –°–∏—Ç–∏¬ª. –í–•–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –°–û –°–¢–û–†–û–ù–´ –ö–û–õ–ï–°–ê –û–ë–û–ó–†–ï–ù–ò–Ø! <br>

‚ÄºÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç—Ä–æ, –≤–µ–¥—É—â–∏–π –≤ –¢–†–ö Vegas, –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç! <b>–í–•–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –¢–û–õ–¨–ö–û –ß–ï–†–ï–ó –ì–õ–ê–í–ù–´–ô –í–•–û–î –ö–û–ù–¶–ï–†–¢–ù–û–ì–û –ó–ê–õ–ê VEGAS CITY HALL</b> –°–û –°–¢–û–†–û–ù–´ –£–õ–ò–¶–´!<br>

‚è∞ –ö–û–ì–î–ê: 15 –¥–µ–∫–∞–±—Ä—è 2023, –ø—è—Ç–Ω–∏—Ü–∞. <br>

üìç–ê–î–†–ï–°: –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è —É–ª., 12, –ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫. <br>

üï∞ –ù–ê–ß–ê–õ–û –î–ï–õ–û–í–û–ô –ü–†–û–ì–†–ê–ú–ú–´: –≤ 10:00 –ú—Å–∫. <br>

üìù –î–õ–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò: –ø–∞—Å–ø–æ—Ä—Ç –Ω–µ –Ω—É–∂–µ–Ω.   <br>

üé´ –≠–õ–ï–ö–¢–†–û–ù–ù–´–ô –ë–ò–õ–ï–¢: –Ω–∞ 1 —ç—Ç–∞–∂–µ –í–∞—Å –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –∑–æ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –í—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ —Å—Ç–æ–π–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç, –Ω–∞–∑—ã–≤–∞–µ—Ç–µ –§–ò–û, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞—à–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤—ã–¥–∞–¥—É—Ç –≤–∞–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–µ–π–¥–∂ —É—á–∞—Å—Ç–Ω–∏–∫–∞. <br>

üíå –° –°–û–ë–û–ô: –≤–æ–∑—å–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é –≤–∏–∑–∏—Ç–∫—É –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –í–∏–ø-–ª–æ—Ç–µ—Ä–µ–µ –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤. <br>

üï∫üèª–î–†–ï–°–°-–ö–û–î: \n

-  –î–ª—è –£–≤–∞–∂–∞–µ–º—ã—Ö –î–∞–º: ¬´Business Casual¬ª, ¬´Black Tie¬ª (–ø–ª–∞—Ç—å—è, –∂–∞–∫–µ—Ç—ã, –∫–ª–∞—Å—Å–∏–∫–∞ –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è);<br>
-  –î–ª—è –£–≤–∞–∂–∞–µ–º—ã—Ö –ì–æ—Å–ø–æ–¥: ¬´Business Best¬ª (–∫–æ—Å—Ç—é–º, –≥–∞–ª—Å—Ç—É–∫, –∫–ª–∞—Å—Å–∏–∫–∞ –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è).<br>

üöó –ü–ê–†–ö–û–í–ö–ê: –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–∞—Ä–∫–æ–≤–∫–æ–π —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ ¬´VEGAS –ö—Ä–æ–∫—É—Å –°–∏—Ç–∏¬ª. –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞—Ä–∫–æ–≤–∫–∏: –ø–µ—Ä–≤—ã–µ 3 —á–∞—Å–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –¥–∞–ª–µ–µ 100 —Ä—É–±–ª–µ–π –∑–∞ 1 —á–∞—Å.<br>

–õ—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–∏–ª, –∞ —Ç–∞–∫–∂–µ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –º–µ—Å—Ç–∞ —Å –∫–æ–º—Ñ–æ—Ä—Ç–æ–º - —ç—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ —Ç–∞–∫—Å–∏. –í–∞—Å –ø–æ–¥–≤–µ–∑—É—Ç –ø—Ä—è–º–æ –∫–æ –≤—Ö–æ–¥—É –∫–æ–Ω—Ü–µ—Ä—Ç–Ω–æ–≥–æ –∑–∞–ª–∞ –∏ –≤–∞–º –Ω–µ –ø—Ä–∏–¥–µ—Ç—Å—è —Ä–µ—à–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å –ø–∞—Ä–∫–æ–≤–∫–æ–π, –æ–ø–ª–∞—Ç–æ–π, –∞ —Ç–∞–∫–∂–µ –≤—ä–µ–∑–¥–æ–º –∏ –≤—ã–µ–∑–¥–æ–º.<br>

üìò –ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê –ü–û –°–°–´–õ–ö–ï:<br>
<a href='https://margocherniak.ru/bbbvegas#rec655424425'>https://margocherniak.ru/bbbvegas#rec655424425</a><br>

üìå –£–ë–ï–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–°–¨–ë–ê: –ü–†–ò–•–û–î–ò–¢–ï –ö –ù–ê–ß–ê–õ–£ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –í 8:30, –¢–ê–ö –ö–ê–ö –û–†–ì–ê–ù–ò–ó–ê–¶–ò–û–ù–ù–´–ô –ü–†–û–¶–ï–°–° –¢–†–ï–ë–£–ï–¢ –í–†–ï–ú–ï–ù–ò!<br>

–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –í–∞—Å –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ñ–µ-–±—Ä–µ–π–∫ —Å–æ –≤–∫—É—Å–Ω—ã–º–∏ —É–≥–æ—â–µ–Ω–∏—è–º–∏ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º —É—á–µ–±–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ê —Ç–∞–∫–∂–µ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å–µ—Ç–∏—Ç—å —ç–∫—Å–ø–æ–∑–æ–Ω—É –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ –ø–µ—Ä–≤—ã–º–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–µ—Ä–µ–¥–æ–≤—ã–º–∏ –Ω–æ–≤–∏–Ω–∫–∞–º–∏ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –∫–æ—Å–º–µ—Ü–µ–≤—Ç–∏–∫–∏ –∏ –±—Ä–µ–Ω–¥–æ–≤ med & beauty –∏–Ω–¥—É—Å—Ç—Ä–∏–∏.<br>

–ü–æ –ª—é–±—ã–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–º –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é –∫ –í–∞—à–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É! <br>

–ñ–µ–ª–∞–µ–º –í–∞–º –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!<br>

–û—Ä–≥–∫–æ–º–∏—Ç–µ—Ç ¬´BIG BEAUTY BOSS¬ª.`


class Manager{
    async getPlace(req,res){
        try{
            let uuid=req.params.uuid
            let seat= await Seat.findOne({where:{uuid}})
            if(!seat){
                return res.status(404).send({error:'–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'})
            }
            return res.send(seat)
        }catch(e){
            return res.status(404).send({error:'–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'})
        }
       
    }
   
    async getAll(req,res){
        let seats = await Seat.findAll({where:{active:true}})
       
        return res.send(seats)
    }
    async getBalcon(req,res){
        let seats = await Balcon.findAll({where:{active:true}})
        return res.send(seats)
    }
    async getAllWithFilters(req,res){
        let {segment, row, order, sectorId} = req.query
        let rowQuery
        let orderQuery
        let balcon
        let seats
        if(!sectorId){
            sectorId=[1,2,3,4]
        }
        if(!Array.isArray(sectorId)){
            sectorId=[sectorId]
        }
        if(segment==2){
            if(row){
                row+=6
                rowQuery=row
            }else{
                rowQuery={[Op.gt]: 6}
            }
        }else if(segment==1){
            if(row){
                rowQuery=row
            }else{
                rowQuery={[Op.lte]: 6}
            }
        }else {
            if(row){
                rowQuery={[Op.or]: [parseInt(row),parseInt(row)+6]}
            }else{
                rowQuery={[Op.gte]: 0}
            }
        }
        if(order==2){
            orderQuery=[['row', 'DESC'], ['col', 'ASC']]
        }else{
            orderQuery=[['row', 'ASC'], ['col', 'ASC']]
        }

        if(segment==3){
           
           
            if(sectorId.length>1){
                balcon = await Balcon.findAll({where:{
                    active:true,
                    row:rowQuery,
                    sectorId: {
                        [Op.or]: sectorId
                    }
                }, order: orderQuery
                })
            }else{
                balcon= await Balcon.findAll({where:{
                    active:true,
                    row:rowQuery,
                    sectorId: sectorId[0]
                }, order: orderQuery
                })
            }
            for(let b of balcon){
                b.dataValues.balcon=1
            }
           
            return res.send(balcon)
        }else {
            if(segment==2){
                if(sectorId.length>1){
                    seats = await Seat.findAll({where:{
                        active:true,
                        row:rowQuery,
                        sectorId: {
                            [Op.or]: sectorId
                            }
                    }, order: orderQuery
                    })
                }else{
                        seats= await Seat.findAll({where:{
                        active:true,
                        row:rowQuery,
                        sectorId: sectorId[0]
                    }, order: orderQuery
                    })
                }
               
                return res.send(seats)
            }else if(segment==1){
               
                if(sectorId.length>1){
                    seats = await Seat.findAll({where:{
                        active:true,
                        row:rowQuery,
                        sectorId: {
                            [Op.or]: sectorId
                            }
                    }, order: orderQuery
                    })
                }else{
                        seats= await Seat.findAll({where:{
                        active:true,
                        row:rowQuery,
                        sectorId: sectorId[0]
                    }, order: orderQuery
                    })
                }
               
                return res.send(seats)
            }else{ 
                
                if(sectorId.length>1){
                    seats = await Seat.findAll({where:{
                        active:true,
                        row:rowQuery,
                        sectorId: {
                            [Op.or]: sectorId
                            }
                    }, order: orderQuery
                    })
                }else{
                        seats= await Seat.findAll({where:{
                        active:true,
                        row:rowQuery,
                        sectorId: sectorId[0]
                    }, order: orderQuery
                    })
                }
                if(sectorId.length>1){
                    balcon = await Balcon.findAll({where:{
                        active:true,
                        row:rowQuery,
                        sectorId: {
                            [Op.or]: sectorId
                        }
                    }, order: orderQuery
                    })
                }else{
                    balcon= await Balcon.findAll({where:{
                        active:true,
                        row:rowQuery,
                        sectorId: sectorId[0]
                    }, order: orderQuery
                    })
                }
                for(let b of balcon){
                    b.dataValues.balcon=1
                    seats.push(b)
                }
                return res.send(seats)
            }
           
            
        }
    }
    async getBookedWithFilters(req,res){
        let {segment, row, order, sectorId} = req.query
        let rowQuery
        let orderQuery
        let balcon
        let seats
        if(!sectorId){
            sectorId=[1,2,3,4]
        }
        if(!Array.isArray(sectorId)){
            sectorId=[sectorId]
        }
        if(segment==2){
            if(row){
                row+=6
                rowQuery=row
            }else{
                rowQuery={[Op.gt]: 6}
            }
        }else if(segment==1){
            if(row){
                rowQuery=row
            }else{
                rowQuery={[Op.lte]: 6}
            }
        }else {
            if(row){
                rowQuery={[Op.or]: [parseInt(row),parseInt(row)+6]}
            }else{
                rowQuery={[Op.gte]: 0}
            }
        }
        if(order==2){
            orderQuery=[['row', 'DESC'], ['col', 'ASC']]
        }else{
            orderQuery=[['row', 'ASC'], ['col', 'ASC']]
        }

        if(segment==3){
           
           
            if(sectorId.length>1){
                balcon = await Balcon.findAll({where:{
                    active:true,
                    row:rowQuery,
                    sectorId: {
                        [Op.or]: sectorId
                    },
                    statusId:3
                }, order: orderQuery
                })
            }else{
                balcon= await Balcon.findAll({where:{
                    active:true,
                    row:rowQuery,
                    sectorId: sectorId[0],
                    statusId:3
                }, order: orderQuery
                })
            }
            for(let b of balcon){
                b.dataValues.balcon=1
                //balcon.push(b)
            }
            return res.send(balcon)
        }else {
            if(segment==2){
                if(sectorId.length>1){
                    seats = await Seat.findAll({where:{
                        active:true,
                        row:rowQuery,
                        sectorId: {
                            [Op.or]: sectorId
                            },
                            statusId:3
                    }, order: orderQuery
                    })
                }else{
                        seats= await Seat.findAll({where:{
                        active:true,
                        row:rowQuery,
                        sectorId: sectorId[0],
                        statusId:3
                    }, order: orderQuery
                    })
                }
               
                return res.send(seats)
            }else if(segment==1){
               
                if(sectorId.length>1){
                    seats = await Seat.findAll({where:{
                        active:true,
                        row:rowQuery,
                        sectorId: {
                            [Op.or]: sectorId
                            },
                            statusId:3
                    }, order: orderQuery
                    })
                }else{
                        seats= await Seat.findAll({where:{
                        active:true,
                        row:rowQuery,
                        sectorId: sectorId[0],
                        statusId:3
                    }, order: orderQuery
                    })
                }
               
                return res.send(seats)
            }else{ 
                
                if(sectorId.length>1){
                    seats = await Seat.findAll({where:{
                        active:true,
                        row:rowQuery,
                        sectorId: {
                            [Op.or]: sectorId
                            },
                            statusId:3
                    }, order: orderQuery
                    })
                }else{
                        seats= await Seat.findAll({where:{
                        active:true,
                        row:rowQuery,
                        sectorId: sectorId[0],
                        statusId:3
                    }, order: orderQuery
                    })
                }
                if(sectorId.length>1){
                    balcon = await Balcon.findAll({where:{
                        active:true,
                        row:rowQuery,
                        sectorId: {
                            [Op.or]: sectorId
                        },
                        statusId:3
                    }, order: orderQuery
                    })
                }else{
                    balcon= await Balcon.findAll({where:{
                        active:true,
                        row:rowQuery,
                        sectorId: sectorId[0],
                        statusId:3
                    }, order: orderQuery
                    })
                }
                for(let b of balcon){
                    b.dataValues.balcon=1
                    seats.push(b)
                }
                return res.send(seats)
            }
           
            
        }
    }
    async showRequests(req,res){
        let seats = await Seat.findAll({where:{active:true, statusId:2}})
        let balcon = await Balcon.findAll({where:{active:true, statusId:2}})
        for(let balc of balcon){
            balc.dataValues.balcon=1
            console.log(balc)
            seats.push(balc)
        }
        console.log(seats)
        return res.send(seats)
    }
    async showBooked(req,res){
        let seats = await Seat.findAll({where:{active:true, statusId:3}})
        let balcon = await Balcon.findAll({where:{active:true, statusId:3}})
        for(let balc of balcon){
            balc.dataValues.balcon=1
            seats.push(balc)
            console.log(balc)
        }
        
        return res.send(seats)
    }
    async updatePrice(req,res){
        try{
            let {sectorId, row, col, price} = req.body

            if(!row.end){
                row.end=row.start
            }
            if(!col.end){
                col.end=col.start
            }
            
            price = parseFloat(price)
            let response = await Seat.update({price}, {where:{
                active:true, 
                row:{
                    [Op.and]: [
                    {[Op.gte]: parseInt(row.start)},
                    {[Op.lte]: parseInt(row.end)},
                    ]
                }, 
                col:{
                    [Op.and]: [
                    {[Op.gte]: parseInt(col.start)},
                    {[Op.lte]: parseInt(col.end)},
                    ]
                }, 
                sectorId:parseInt(sectorId)
            }})
            return res.send(response)
        }catch(e){
            console.log(e)
            return res.send({error:"Unhandled error"})
        }
        
    }
    async getList(req,res){
        let csv=''
        let activeSeat = await Seat.findOne({where:{active:true}})
        let event = await Event.findOne({where: {id:activeSeat.eventId}})
        let date = new Date(event.date)
        var filename = date.getFullYear()+('0' +(date.getMonth()+1)).slice(-2)+('0' + date.getDate()).slice(-2) +event.name
        let seats = await Seat.findAll({where:{active:true}})
        
        for(let seat of seats ){
            let row=-6
            let segment =''
            let sector=''
            switch (seat.sectorId) {
                case 1:
                    sector='Bronze'
                    break;
                case 2:
                    sector='Platinum'
                    break;
                case 3:
                    sector='Gold'
                    break;
                case 4:
                    sector='Silver'
                    break;
                default:
                    break;
                }
                row+=seat.row
            if(row<=0){
                row+=6
                segment='–ê—Ä–µ–Ω–∞'
            }else{
                segment='–ü–∞—Ä—Ç–µ—Ä'
            }
            csv+=seat.uuid+','+segment+','+sector+','+row+','+seat.col+','+seat.price+'\n';
        }
        seats = await Balcon.findAll({where:{active:true}})
        
        for(let seat of seats ){
            let row=-6
            let segment =''
            let sector=''
            switch (seat.sectorId) {
                case 1:
                    sector='Bronze'
                    break;
                case 2:
                    sector='Platinum'
                    break;
                case 3:
                    sector='Gold'
                    break;
                case 4:
                    sector='Silver'
                    break;
                default:
                    break;
                }
                row+=seat.row
            if(row<=0){
                row+=6
                
            }
            segment='–ë–∞–ª–∫–æ–Ω'
            csv+=seat.uuid+','+segment+','+sector+','+row+','+seat.col+','+seat.price+'\n';
        }
        let file = path.join(__dirname,`../tables/${filename}.csv`)
        fs.writeFile(file,csv,()=>{
            res.set('Content-Disposition',`attachment; filename="${filename}.csv"`).sendFile(file)
            setTimeout(()=>{fs.unlink(file, async (err) => {
                if (err) throw err;
                })}, 
                20000)
            
        })
       
    }
    async bookOne(req,res){
        try{
            let bc
            let {id} = req.body
            //filterInput(req.body) soon
            let place=1
            let seat = await Seat.findOne({where:{id, active:true,statusId:2}})
            let segment ='Parter'
            let row=-6
            console.log(seat)
            if(!seat){
                seat = await Balcon.findOne({where:{id, active:true,statusId:2}})
                row+=6
                segment ='Balcony'
                place=2
            }
               
            
            if(seat.statusId==3){
                return res.status(400).send({error:'–ú–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ'})
            }
            let response 
            if(place==1){
                response= await Seat.update({statusId:3, email:seat.email },{where:{id}})
            }else{
                response= await Seat.update({statusId:3, email:seat.email },{where:{id}})
            }
            let sector = ''
            switch (seat.sectorId) {
              case 1:
                sector =  'Bronze'
                break;
              case 2:
                sector =  'Platinum'
                break;
              case 3:
              sector =  'Gold'
                break;
              case 4:
              sector =  'Silver'
                break;
              default:
                break;
            }
            row+=seat.row
            if(row<=0){
                segment ='Arena'
                row+=6
            }
            let event = await Event.findOne({order: [ [ 'createdAt', 'DESC' ]],})
            let date = new Date(event.date)
            var datestring = date.getDate()  + "." + (date.getMonth()+1) + "." + date.getFullYear()
            const directory = __dirname+'/../tickets';
            bc = await bwipjs.toBuffer({
                bcid:        'interleaved2of5',     
                text:        seat.uuid, 
                includetext: true,  
                textxalign:  'center',   
            })
            
           
                let doc = new PDFDocument({size: 'A4'});
                doc.pipe(fs.createWriteStream(directory+'/'+seat.uuid+'.pdf')); 
                doc.image(__dirname+'/ticket.png', 0, 0,{width:595.28, height:841.89})
                doc.image('data:image/png;base64,'+bc.toString('base64'),  265,680,{ height:86})
                .fontSize(15) 
                .text(row, 210, 452)
                .text(seat.col, 405, 458)
                .text(segment,210,504)
                .text(sector,215,559)
                .fontSize(12) 
                .text(seat.email,387, 505)
                .save()
                doc.end()
            const mailOptions = {
                from: process.env.SMTP_MAIL,
                to: seat.email,
                subject: `–ë–ò–õ–ï–¢ –ù–ê BIG BEAUTY BOSS VEGAS`,
                attachments: [
                    {   // file on disk as an attachment
                        filename: 'ticket.pdf',
                        path: __dirname+'/../tickets/'+seat.uuid+'.pdf' // stream this file
                    }],
                html: mailText
            };
            
            transporter.sendMail(mailOptions, function(error, info){
                if (error) {
                    console.log(error);
                } else {
                    console.log('Email sent: ' + info.response);
                }
            });
            let aa = await Seat.findAll({where:{active:true, statusId:2}})
            let bb = await Balcon.findAll({where:{active:true, statusId:2}})
            for(let balc of bb){
                balc.dataValues.balcon=1
                aa.push(balc)
            }
            return res.send(aa)
        }catch(e){
            console.log(e)
            return res.send({error:"Unhandled error"})
        }
    }
    async bookBalcon(req,res){
        try{
            let bc
            let {id} = req.body
            //filterInput(req.body) soon
            let seat = await Balcon.findOne({where:{id, active:true, statusId:2}})
            console.log(seat)
            if(!seat)
                return res.status(400).send({error:'–ú–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ'})
            if(seat.statusId==3){
                return res.status(400).send({error:'–ú–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ'})
            }
            let response = await Balcon.update({statusId:3, email:seat.email },{where:{id}})
            let sector = ''
            let segment='Balcony'
            switch (seat.sectorId) {
              case 1:
                sector =  'Bronze'
                break;
              case 2:
                sector =  'Platinum'
                break;
              case 3:
              sector =  'Gold'
                break;
              case 4:
              sector =  'Silver'
                break;
              default:
                break;
            }
            let row=seat.row
            let event = await Event.findOne({order: [ [ 'createdAt', 'DESC' ]],})
            let date = new Date(event.date)
            var datestring = date.getDate()  + "." + (date.getMonth()+1) + "." + date.getFullYear()
            const directory = __dirname+'/../tickets';
            bc = await bwipjs.toBuffer({
                bcid:        'interleaved2of5',     
                text:        seat.uuid, 
                includetext: true,  
                textxalign:  'center',   
            })
            
           
                let doc = new PDFDocument({size: 'A4'});
                doc.pipe(fs.createWriteStream(directory+'/'+seat.uuid+'.pdf')); 
                doc.image(__dirname+'/ticket.png', 0, 0,{width:595.28, height:841.89})
                doc.image('data:image/png;base64,'+bc.toString('base64'),  265,680,{ height:86})
                .fontSize(15) 
                .text(row, 210, 452)
                .text(seat.col, 405, 458)
                .text(segment,210,504)
                .text(sector,215,559)
                .fontSize(12) 
                .text(seat.email,387, 505)
                .save()
                doc.end()
            const mailOptions = {
                from: process.env.SMTP_MAIL,
                to: seat.email,
                subject: `–ë–ò–õ–ï–¢ –ù–ê BIG BEAUTY BOSS VEGAS`,
                attachments: [
                    {   // file on disk as an attachment
                        filename: 'ticket.pdf',
                        path: __dirname+'/../tickets/'+seat.uuid+'.pdf' // stream this file
                    }],
                html: mailText
            };
            
            transporter.sendMail(mailOptions, function(error, info){
                if (error) {
                    console.log(error);
                } else {
                    console.log('Email sent: ' + info.response);
                }
            });
            let aa = await Seat.findAll({where:{active:true, statusId:2}})
            let bb = await Balcon.findAll({where:{active:true, statusId:2}})
            for(let balc of bb){
                balc.dataValues.balcon=1
                aa.push(balc)
            }
            return res.send(aa)
        }catch(e){
            console.log(e)
            return res.send({error:"Unhandled error"})
        }
    }
    async declineBooking(req, res){
        try{
            let {id} = req.body
            let seat = await Seat.findOne({where:{id, active:true, statusId:3}})
            console.log(seat)
            if(!seat)
                return res.status(400).send({error:'–ú–µ—Å—Ç–æ —É–∫–∞–∑–∞–Ω–æ –Ω–µ –≤–µ—Ä–Ω–æ'})
            let uid = Math.floor(Math.random() * 10000000000000)
            let response = await Seat.update({statusId:1, email:'', uuid:uid},{where:{id}})
            let sector = ''
            let segment='Parter'
            switch (seat.sectorId) {
              case 1:
                sector =  'Bronze'
                break;
              case 2:
                sector =  'Platinum'
                break;
              case 3:
              sector =  'Gold'
                break;
              case 4:
              sector =  'Silver'
                break;
              default:
                break;
            }
            row+=seat.row
            if(row<=0){
                row+=6
                segment='Arena'
            }
            
            const directory = __dirname+'/../tickets';
            let bc = await bwipjs.toBuffer({
                bcid:        'interleaved2of5',     
                text:        uid, 
                includetext: true,  
                textxalign:  'center',   
            }) 
            fs.unlink(directory+'/'+seat.uuid+'.pdf', async (err) => {
                if (err) throw err;
                })
            let doc = new PDFDocument({size: 'A4'});
                doc.pipe(fs.createWriteStream(directory+'/'+uid+'.pdf')); 
                doc.image(__dirname+'/ticket.png', 0, 0,{width:595.28, height:841.89})
                doc.image('data:image/png;base64,'+bc.toString('base64'),  265,680,{ height:86})
                .fontSize(15) 
                .text(row, 210, 452)
                .text(seat.col, 405, 458)
                .text(segment,210,504)
                .text(sector,215,559)
                .fontSize(12) 
                .text(seat.email,387, 505)
                .save()
                doc.end()
            const mailOptions = {
                from: process.env.SMTP_MAIL,
                to: seat.email,
                subject: `–ë—Ä–æ–Ω—å –º–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞`,
                html: `<h4>–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</h4>
                       `
            };
            
            transporter.sendMail(mailOptions, function(error, info){
                if (error) {
                    console.log(error);
                } else {
                    console.log('Email sent: ' + info.response);
                }
            });
            let aa = await Seat.findAll({where:{active:true, statusId:2}})
            let bb = await Balcon.findAll({where:{active:true, statusId:2}})
            for(let balc of bb){
                aa.push(balc)
            }
            return res.send(aa)
        }catch(e){
            console.log(e)
            return res.status(500).send({error:"Unhandled error"})
        }
    }
    async declineBalcon(req, res){
        try{
            let {id} = req.body
            //filterInput(req.body) soon
        console.log(req.body)
            let seat = await Balcon.findOne({where:{id}})
            if(!seat)
                return res.status(400).send({error:'–ú–µ—Å—Ç–æ —É–∫–∞–∑–∞–Ω–æ –Ω–µ –≤–µ—Ä–Ω–æ'})
            let uid = Math.floor(Math.random() * 10000000000000)
            let response = await Balcon.update({statusId:1, email:'', uuid:uid},{where:{id}})
            let sector = ''
            let segment='Balcony'
            switch (seat.sectorId) {
              case 1:
                sector =  'Bronze'
                break;
              case 2:
                sector =  'Platinum'
                break;
              case 3:
              sector =  'Gold'
                break;
              case 4:
              sector =  'Silver'
                break;
              default:
                break;
            }
            row+=seat.row
            if(row<=0){
                row+=6
                segment='Balcony'
            }
            
            const directory = __dirname+'/../tickets';
            let bc = await bwipjs.toBuffer({
                bcid:        'interleaved2of5',     
                text:        uid, 
                includetext: true,  
                textxalign:  'center',   
            }) 
            fs.unlink(directory+'/'+seat.uuid+'.pdf', async (err) => {
                if (err) throw err;
                })
            let doc = new PDFDocument({size: 'A4'});
                doc.pipe(fs.createWriteStream(directory+'/'+uid+'.pdf')); 
                doc.image(__dirname+'/ticket.png', 0, 0,{width:595.28, height:841.89})
                doc.image('data:image/png;base64,'+bc.toString('base64'),  265,680,{ height:86})
                .fontSize(15) 
                .text(row, 210, 452)
                .text(seat.col, 405, 458)
                .text(segment,210,504)
                .text(sector,215,559)
                .fontSize(12) 
                .text(seat.email,387, 505)
                .save()
                doc.end()
            const mailOptions = {
                from: process.env.SMTP_MAIL,
                to: seat.email,
                subject: `–ë—Ä–æ–Ω—å –º–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞`,
                html: `<h4>–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</h4>
                       `
            };
            
            transporter.sendMail(mailOptions, function(error, info){
                if (error) {
                    console.log(error);
                } else {
                    console.log('Email sent: ' + info.response);
                }
            });
            return res.send({res:"–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞"})
        }catch(e){
            console.log(e)
            return res.send({error:"Unhandled error"})
        }
    }
    
    async requestBooking(req,res){
        try{
            console.log(req.body)
            let ticket= req.body
            let email=ticket.email
            let re = /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/g
            let text = ``
            let row=-6
            let segment='Stalls'
            if(!re.test(email))
                return res.status(400).send({error:'–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω email'})
            let seat = await Seat.findOne({where:{active:true, row:ticket.row, col:ticket.col, sectorId:ticket.sectorId}})
            if(!seat)
                return res.status(404).send({error:'–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–æ –º–µ—Å—Ç–æ'})
            if(seat.statusId!=1)
                return res.status(404).send({error:'–ú–µ—Å—Ç–æ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ'})
            let response = await Seat.update({statusId:2, email },{where:{active:true, row:ticket.row, col:ticket.col, sectorId:ticket.sectorId}})
            switch (ticket.sectorId) {
            case 1:
                ticket.sector =  'Bronze'
                break;
            case 2:
                ticket.sector =  'Platinum'
                break;
            case 3:
                ticket.sector =  'Gold'
                break;
            case 4:
                ticket.sector =  'Silver'
                break;
            default:
                break;
            }
            row+=seat.row
            if(row<=0){
                row+=6

            }
            text+=`<p>–°–µ–∫—Ç–æ—Ä: ${ticket.sector} –ú–µ—Å—Ç–æ: ${ticket.col} –†—è–¥: ${row}</p>`
            
            const mailOptions = {
                from: process.env.SMTP_MAIL,
                to: process.env.ADMIN_EMAIL,//process.env.ADMIN_EMAIL,
                subject: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ`,
                html: text+`<p>email: ${email}</p>`
            };
            
            transporter.sendMail(mailOptions, function(error, info){
                if (error) {
                    console.log(error);
                } else {
                    console.log('Email sent: ' + info.response);
                }
            });
            return res.send({res:"–û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"})
        }catch(e){
            console.log(e)
            return res.send({error:"Unhandled error"})
        }
    }
    async requestBalcon(req,res){
        try{
            console.log(req.body)
            let ticket= req.body
            let email=ticket.email
            let re = /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/g
            let text = ``
            let row=0
            if(!re.test(email))
                return res.status(400).send({error:'–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω email'})
            let seat = await Balcon.findOne({where:{active:true, row:ticket.row, col:ticket.col, sectorId:ticket.sectorId}})
            if(!seat)
                return res.status(404).send({error:'–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–æ –º–µ—Å—Ç–æ'})
            if(seat.statusId!=1)
                return res.status(404).send({error:'–ú–µ—Å—Ç–æ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ'})
            let response = await Balcon.update({statusId:2, email },{where:{active:true, row:ticket.row, col:ticket.col, sectorId:ticket.sectorId}})
            switch (ticket.sectorId) {
            case 1:
                ticket.sector =  'Bronze'
                break;
            case 2:
                ticket.sector =  'Platinum'
                break;
            case 3:
                ticket.sector =  'Gold'
                break;
            case 4:
                ticket.sector =  'Silver'
                break;
            default:
                break;
            }
            row=seat.row
            text+=`<p>–°–µ–∫—Ç–æ—Ä: ${ticket.sector} –ú–µ—Å—Ç–æ: ${ticket.col} –†—è–¥: ${row}</p>`
            
            const mailOptions = {
                from: process.env.SMTP_MAIL,
                to: process.env.ADMIN_EMAIL,//process.env.ADMIN_EMAIL,
                subject: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ`,
                html: text+`<p>email: ${email}</p>`
            };
            
            transporter.sendMail(mailOptions, function(error, info){
                if (error) {
                    console.log(error);
                } else {
                    console.log('Email sent: ' + info.response);
                }
            });
            return res.send({res:"–û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"})
        }catch(e){
            console.log(e)
            return res.status(404).send({error:"Unhandled error"})
        }
    }
    async changeEmail(req,res){
        let {id} = req.params
        let {email} = req.body
        let seat= await Seat.findOne({where:{id:id,active:true, statusId:3} })
        let result 
        let segment='Parter'
        if(!seat){
            seat= await Balcon.findOne({where:{id:id,active:true, statusId:3} })
            result = await Balcon.update({email },{where:{id, active:true, statusId:3}})
            segment='Balcony'
        }else{
            result= await Seat.update({email },{where:{id, active:true, statusId:3}})
        }
            console.log(result)
       
       //let seat= await Seat.findOne({where:{id:id} })
        let bc
        let row=-6
       
        
        let sector = ''
        switch (seat.sectorId) {
          case 1:
            sector =  'Bronze'
            break;
          case 2:
            sector =  'Platinum'
            break;
          case 3:
          sector =  'Gold'
            break;
          case 4:
          sector =  'Silver'
            break;
          default:
            break;
        }
        row+=seat.row
        if(row<=0){
            row+=6
            if(segment!='Balcony'){
                segment='Arena'
            }
        }
        let event = await Event.findOne({order: [ [ 'createdAt', 'DESC' ]],})
        let date = new Date(event.date)
        var datestring = date.getDate()  + "." + (date.getMonth()+1) + "." + date.getFullYear()
        const directory = __dirname+'/../tickets';
        bc = await bwipjs.toBuffer({
            bcid:        'interleaved2of5',     
            text:        seat.uuid, 
            includetext: true,  
            textxalign:  'center',   
        })
        
       
            let doc = new PDFDocument({size: 'A4'});
            doc.pipe(fs.createWriteStream(directory+'/'+seat.uuid+'.pdf')); 
            doc.image(__dirname+'/ticket.png', 0, 0,{width:595.28, height:841.89})
            doc.image('data:image/png;base64,'+bc.toString('base64'),  265,680,{ height:86})
            .fontSize(15) 
            .text(row, 210, 452)
            .text(seat.col, 405, 458)
            .text(segment,210,504)
            .text(sector,215,559)
            .fontSize(12) 
            .text(seat.email,387, 505)
            
                //.text(datestring, 340, 421)
            .save()
            doc.end()
        const mailOptions = {
            from: process.env.SMTP_MAIL,
            to: seat.email,
            subject: `–ë–ò–õ–ï–¢ –ù–ê BIG BEAUTY BOSS VEGAS`,
            attachments: [
                {   // file on disk as an attachment
                    filename: 'ticket.pdf',
                    path: __dirname+'/../tickets/'+seat.uuid+'.pdf' // stream this file
                }],
            html: mailText
        };
        
        transporter.sendMail(mailOptions, function(error, info){
            if (error) {
                console.log(error);
            } else {
                console.log('Email sent: ' + info.response);
            }
        });
        return res.send({res:"–ú–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ"})
        //return res.send(response)
    }
    async changeEmailBalcon(req,res){
        let {id} = req.params
        let {email} = req.body
        let seat= await Seat.findOne({where:{id:id,active:true, statusId:3} })
        let result 
        if(!seat){
            seat= await Balcon.findOne({where:{id:id,active:true, statusId:3} })
            result = await Balcon.update({email },{where:{id, active:true, statusId:3}})
        }else{
        result= await Seat.update({email },{where:{id, active:true, statusId:3}})
       
        }
       
       //let seat= await Seat.findOne({where:{id:id} })
        let bc
        let row=-6
       
        
        let sector = ''
        switch (seat.sectorId) {
          case 1:
            sector =  'Bronze'
            break;
          case 2:
            sector =  'Platinum'
            break;
          case 3:
          sector =  'Gold'
            break;
          case 4:
          sector =  'Silver'
            break;
          default:
            break;
        }
        row+=seat.row
        if(row<=0){
            row+=6
        }
        let event = await Event.findOne({order: [ [ 'createdAt', 'DESC' ]],})
        let date = new Date(event.date)
        var datestring = date.getDate()  + "." + (date.getMonth()+1) + "." + date.getFullYear()
        const directory = __dirname+'/../tickets';
        bc = await bwipjs.toBuffer({
            bcid:        'interleaved2of5',     
            text:        seat.uuid, 
            includetext: true,  
            textxalign:  'center',   
        })
        
       
            let doc = new PDFDocument({size: 'A4'});
            doc.pipe(fs.createWriteStream(directory+'/'+seat.uuid+'.pdf')); 
            doc.image(__dirname+'/ticket.png', 0, 0,{width:450})
            doc.image('data:image/png;base64,'+bc.toString('base64'),  421,85,{ height:66})
            .fontSize(14) 
            .text(row, 160, 342)
            .text(seat.col, 340, 344)
            .text(segment,160,383)
            .text(seat.email,293, 379)
            .text(sector,160,424)
                //.text(datestring, 340, 421)
            .save()
            doc.end()
        const mailOptions = {
            from: process.env.SMTP_MAIL,
            to: seat.email,
            subject: `–ë—Ä–æ–Ω—å –º–µ—Å—Ç–∞`,
            attachments: [
                {   // file on disk as an attachment
                    filename: 'ticket.pdf',
                    path: __dirname+'/../tickets/'+seat.uuid+'.pdf' // stream this file
                }],
            html: `<h4>–í–∞—à–µ –º–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ!</h4>
                    <p>–°–µ–∫—Ç–æ—Ä: ${sector} –ú–µ—Å—Ç–æ: ${seat.col} –†—è–¥: ${row}</p>`
        };
        
        transporter.sendMail(mailOptions, function(error, info){
            if (error) {
                console.log(error);
            } else {
                console.log('Email sent: ' + info.response);
            }
        });
        return res.send({res:"–ú–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ"})
        //return res.send(response)
    }
    async downloadTicket(req,res){
        let {id} = req.params
        let seat = await Seat.findOne({where:{id, active:true, statusId:3}})
        if(!seat){
            seat= await Balcon.findOne({where:{id:id,active:true, statusId:3} })
        }
        console.log(seat)
        let file = path.join(__dirname,`../tickets/${seat.uuid}.pdf`) 
        return res.set('Content-Disposition',`attachment; filename="ticket.pdf"`).sendFile(file)
    }
    async resend(req,res){
       
            let {id} = req.params
            let seat = await Seat.findOne({where:{id,active:true, statusId:3}})
            if(!seat){
                seat= await Balcon.findOne({where:{id:id,active:true, statusId:3} })
            }
            const mailOptions = {
                from: process.env.SMTP_MAIL,
                to: seat.email,
                subject: `–ë–ò–õ–ï–¢ –ù–ê BIG BEAUTY BOSS VEGAS`,
                attachments: [
                    {   // file on disk as an attachment
                        filename: 'ticket.pdf',
                        path: __dirname+'/../tickets/'+seat.uuid+'.pdf' // stream this file
                    }],
                html: mailText
            };
            
            transporter.sendMail(mailOptions, function(error, info){
                if (error) {
                    console.log(error);
                } else {
                    console.log('Email sent: ' + info.response);
                }
            });
            return res.send({res:"–ë–∏–ª–µ—Ç –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω –Ω–∞ –ø–æ—á—Ç—É"})
    }
    
    
}


let manager = new Manager()
module.exports = manager